"""
Componentes de navega√ß√£o para o Sistema de Monitoramento do Atleta
-----------------------------------------------------------------
Este m√≥dulo cont√©m fun√ß√µes para criar elementos de navega√ß√£o como sidebar e menus.
"""

import streamlit as st
from utils.auth import logout_user

def create_sidebar():
    """
    Cria a barra lateral de navega√ß√£o com links para todas as p√°ginas.
    """
    with st.sidebar:
        st.title("üèÉ Monitoramento")
        
        # Informa√ß√µes do usu√°rio
        if 'user_name' in st.session_state:
            st.write(f"Ol√°, **{st.session_state.user_name}**!")
        
        st.markdown("---")
        
        # Links de navega√ß√£o
        st.subheader("M√≥dulos")
        
        # Dashboard (p√°gina inicial)
        if st.sidebar.button("üìä Dashboard", use_container_width=True):
            st.switch_page("app.py")
        
        # Prontid√£o
        if st.sidebar.button("üîã Prontid√£o", use_container_width=True):
            st.switch_page("pages/1_Prontidao.py")
        
        # Treino
        if st.sidebar.button("üèãÔ∏è Treino", use_container_width=True):
            st.switch_page("pages/2_Treino.py")
        
        # Psicol√≥gico
        if st.sidebar.button("üß† Psicol√≥gico", use_container_width=True):
            st.switch_page("pages/3_Psicologico.py")
        
        # Dashboard Avan√ßado
        if st.sidebar.button("üìà Dashboard Avan√ßado", use_container_width=True):
            st.switch_page("pages/4_Dashboard.py")
        
        # Relat√≥rios
        if st.sidebar.button("üìù Relat√≥rios", use_container_width=True):
            st.switch_page("pages/5_Relatorios.py")
        
        # Configura√ß√µes
        if st.sidebar.button("‚öôÔ∏è Configura√ß√µes", use_container_width=True):
            st.switch_page("pages/6_Configuracoes.py")
        
        st.markdown("---")
        
        # Bot√£o de logout
        if st.sidebar.button("üö™ Sair", use_container_width=True):
            logout_user()
            st.rerun()
        
        # Rodap√©
        st.markdown("---")
        st.caption("¬© 2025 Sistema de Monitoramento do Atleta")

def create_tabs(tab_names):
    """
    Cria um conjunto de abas para navega√ß√£o dentro de uma p√°gina.
    
    Args:
        tab_names (list): Lista de nomes das abas
    
    Returns:
        list: Lista de objetos de aba do Streamlit
    """
    return st.tabs(tab_names)

def create_breadcrumbs(path_items):
    """
    Cria uma trilha de navega√ß√£o (breadcrumbs) para mostrar a localiza√ß√£o atual.
    
    Args:
        path_items (list): Lista de itens do caminho
    """
    breadcrumb_html = """
    <style>
    .breadcrumb {
        display: flex;
        flex-wrap: wrap;
        list-style: none;
        margin: 0;
        padding: 0;
        font-size: 14px;
        margin-bottom: 15px;
    }
    .breadcrumb-item {
        color: #1E88E5;
        margin-right: 5px;
    }
    .breadcrumb-separator {
        color: #9E9E9E;
        margin: 0 5px;
    }
    .breadcrumb-active {
        color: #424242;
        font-weight: 500;
    }
    </style>
    <div class="breadcrumb">
    """
    
    for i, item in enumerate(path_items):
        if i == len(path_items) - 1:
            # √öltimo item (ativo)
            breadcrumb_html += f'<div class="breadcrumb-active">{item}</div>'
        else:
            # Itens anteriores
            breadcrumb_html += f'<div class="breadcrumb-item">{item}</div>'
            breadcrumb_html += '<div class="breadcrumb-separator">‚Ä∫</div>'
    
    breadcrumb_html += "</div>"
    
    st.markdown(breadcrumb_html, unsafe_allow_html=True)

def create_section_header(title, description="", icon=""):
    """
    Cria um cabe√ßalho de se√ß√£o com t√≠tulo, descri√ß√£o e √≠cone opcional.
    
    Args:
        title (str): T√≠tulo da se√ß√£o
        description (str): Descri√ß√£o da se√ß√£o
        icon (str): √çcone para a se√ß√£o
    """
    header_html = f"""
    <style>
    .section-header {{
        margin-bottom: 20px;
    }}
    .section-title {{
        font-size: 24px;
        font-weight: 600;
        color: #1E88E5;
        margin-bottom: 5px;
        display: flex;
        align-items: center;
    }}
    .section-icon {{
        margin-right: 10px;
        font-size: 28px;
    }}
    .section-description {{
        color: #616161;
        font-size: 16px;
        margin-top: 5px;
    }}
    </style>
    <div class="section-header">
        <div class="section-title">
    """
    
    if icon:
        header_html += f'<span class="section-icon">{icon}</span>'
    
    header_html += f"""
        {title}
        </div>
    """
    
    if description:
        header_html += f'<div class="section-description">{description}</div>'
    
    header_html += "</div>"
    
    st.markdown(header_html, unsafe_allow_html=True)

def create_action_buttons(actions):
    """
    Cria um conjunto de bot√µes de a√ß√£o.
    
    Args:
        actions (list): Lista de dicion√°rios com 'label', 'icon' e 'action'
    """
    cols = st.columns(len(actions))
    
    for i, action in enumerate(actions):
        with cols[i]:
            if st.button(f"{action.get('icon', '')} {action['label']}", use_container_width=True):
                action['action']()

def create_page_navigation(current_page, total_pages, on_previous, on_next):
    """
    Cria controles de navega√ß√£o de p√°gina para listas paginadas.
    
    Args:
        current_page (int): P√°gina atual
        total_pages (int): Total de p√°ginas
        on_previous (function): Fun√ß√£o a ser chamada ao clicar em anterior
        on_next (function): Fun√ß√£o a ser chamada ao clicar em pr√≥ximo
    """
    col1, col2, col3 = st.columns([1, 3, 1])
    
    with col1:
        if current_page > 1:
            if st.button("‚Üê Anterior", use_container_width=True):
                on_previous()
    
    with col2:
        st.markdown(f"<div style='text-align: center; color: #616161;'>P√°gina {current_page} de {total_pages}</div>", unsafe_allow_html=True)
    
    with col3:
        if current_page < total_pages:
            if st.button("Pr√≥ximo ‚Üí", use_container_width=True):
                on_next()
