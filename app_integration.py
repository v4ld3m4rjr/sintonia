
import streamlit as st
from mental_assessment import mental_assessment_module

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sintonia",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para autentica√ß√£o
def authenticate():
    """Fun√ß√£o de autentica√ß√£o de usu√°rios."""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
        st.session_state.user_id = None

    if not st.session_state.authenticated:
        with st.form("login_form"):
            st.subheader("Login")
            username = st.text_input("Usu√°rio")
            password = st.text_input("Senha", type="password")
            submit = st.form_submit_button("Entrar")

            if submit:
                # Aqui voc√™ implementaria a verifica√ß√£o real de credenciais
                # Exemplo simplificado:
                if username == "demo" and password == "demo123":
                    st.session_state.authenticated = True
                    st.session_state.user_id = "demo_user_id"
                    st.session_state.username = username
                    st.experimental_rerun()
                else:
                    st.error("Credenciais inv√°lidas")

        # Op√ß√£o para criar conta
        with st.expander("Criar nova conta"):
            with st.form("signup_form"):
                st.subheader("Cadastro")
                new_username = st.text_input("Novo Usu√°rio")
                new_password = st.text_input("Nova Senha", type="password")
                confirm_password = st.text_input("Confirmar Senha", type="password")
                submit = st.form_submit_button("Cadastrar")

                if submit:
                    # Implementar l√≥gica de cadastro
                    if new_password != confirm_password:
                        st.error("As senhas n√£o coincidem")
                    else:
                        # Aqui voc√™ implementaria o cadastro real
                        st.success("Conta criada com sucesso! Fa√ßa login.")

        return False
    return True

# Fun√ß√£o principal do aplicativo
def main():
    # Verificar autentica√ß√£o
    if not authenticate():
        return

    # Sidebar para navega√ß√£o
    with st.sidebar:
        st.title("Sintonia")
        st.write(f"Ol√°, {st.session_state.username}!")

        # Menu de navega√ß√£o
        page = st.radio(
            "Navega√ß√£o",
            ["In√≠cio", "Avalia√ß√£o Mental", "Configura√ß√µes", "Sair"]
        )

        # Bot√£o de logout
        if st.button("Logout"):
            st.session_state.authenticated = False
            st.session_state.user_id = None
            st.experimental_rerun()

    # Conte√∫do principal
    if page == "In√≠cio":
        st.title("Bem-vindo ao Sintonia")
        st.write("Selecione uma op√ß√£o no menu lateral para come√ßar.")

        # Cards informativos
        col1, col2 = st.columns(2)

        with col1:
            st.info("**Avalia√ß√£o Mental**  
Registre sua prontid√£o para treino e analise seus resultados.")

        with col2:
            st.info("**Configura√ß√µes**  
Personalize sua experi√™ncia no aplicativo.")

    elif page == "Avalia√ß√£o Mental":
        # Integra√ß√£o com o m√≥dulo de avalia√ß√£o mental
        mental_assessment_module()

    elif page == "Configura√ß√µes":
        st.title("Configura√ß√µes")

        # Prefer√™ncias do usu√°rio
        st.subheader("Prefer√™ncias")

        # Tema
        theme = st.selectbox(
            "Tema",
            ["Claro", "Escuro", "Sistema"],
            index=2
        )

        # Notifica√ß√µes
        notifications = st.checkbox("Ativar notifica√ß√µes", value=True)

        # Bot√£o para salvar configura√ß√µes
        if st.button("Salvar Configura√ß√µes"):
            st.success("Configura√ß√µes salvas com sucesso!")

    elif page == "Sair":
        st.session_state.authenticated = False
        st.session_state.user_id = None
        st.experimental_rerun()

# Executar o aplicativo
if __name__ == "__main__":
    main()
