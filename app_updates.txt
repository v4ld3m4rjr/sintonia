
    # Adicionar ap√≥s as importa√ß√µes existentes
    from readiness_assessment import ReadinessAssessment, show_readiness_assessment
    from training_assessment import TrainingAssessment, show_training_assessment
    from psychological_assessment import PsychologicalAssessment, show_psychological_assessment

    # Adicionar √†s vari√°veis de sess√£o
    if 'current_tab' not in st.session_state:
        st.session_state.current_tab = 'readiness'
    if 'readiness_history' not in st.session_state:
        st.session_state.readiness_history = []
    if 'training_history' not in st.session_state:
        st.session_state.training_history = []
    if 'psychological_history' not in st.session_state:
        st.session_state.psychological_history = []

    # Modificar a fun√ß√£o show_questionnaire para incluir as novas tabs
    def show_questionnaire():
        add_logo()
        st.title(f"Ol√°, {st.session_state.username}! üëã")

        # Bot√µes de administra√ß√£o e logout (manter como est√°)
        if st.session_state.is_admin:
            if st.sidebar.button("Painel de Administra√ß√£o"):
                st.session_state.show_admin = True
                st.experimental_rerun()

        if st.sidebar.button("Logout"):
            logout()

        # Novas tabs para os diferentes tipos de avalia√ß√£o
        tab1, tab2, tab3, tab4 = st.tabs([
            "Avalia√ß√£o de Prontid√£o",
            "Estado de Treino",
            "Avalia√ß√£o Psicoemocional",
            "Dashboard"
        ])

        with tab1:
            show_readiness_assessment()

        with tab2:
            show_training_assessment()

        with tab3:
            show_psychological_assessment()

        with tab4:
            show_dashboard()

    def show_dashboard():
        st.header("Dashboard Geral")

        # M√©tricas gerais
        col1, col2, col3 = st.columns(3)

        # √öltimos 7 dias de dados
        recent_readiness = st.session_state.readiness_history[-7:] if len(st.session_state.readiness_history) > 0 else []
        recent_training = st.session_state.training_history[-7:] if len(st.session_state.training_history) > 0 else []
        recent_psych = st.session_state.psychological_history[-7:] if len(st.session_state.psychological_history) > 0 else []

        with col1:
            if recent_readiness:
                avg_readiness = np.mean([entry['score'] for entry in recent_readiness])
                st.metric("Prontid√£o M√©dia (7 dias)", f"{avg_readiness:.1f}%")

        with col2:
            if recent_training:
                avg_load = np.mean([session['load'] for session in recent_training])
                st.metric("Carga M√©dia (7 dias)", f"{avg_load:.1f}")

        with col3:
            if recent_psych:
                avg_stress = np.mean([assessment['stress_score'] for assessment in recent_psych])
                st.metric("Estresse M√©dio (7 dias)", f"{avg_stress:.1f}")

        # Gr√°ficos de tend√™ncia
        if recent_readiness or recent_training or recent_psych:
            st.subheader("Tend√™ncias dos √öltimos 7 Dias")

            fig, ax = plt.subplots(figsize=(12, 6))

            if recent_readiness:
                dates = [entry['date'] for entry in recent_readiness]
                scores = [entry['score'] for entry in recent_readiness]
                ax.plot(dates, scores, 'b-', label='Prontid√£o', marker='o')

            if recent_training:
                dates = [session['date'] for session in recent_training]
                loads = [session['load'] for session in recent_training]
                ax.plot(dates, loads, 'r-', label='Carga', marker='s')

            plt.title("Tend√™ncias Integradas")
            plt.xlabel("Data")
            plt.ylabel("Score/Carga")
            plt.legend()
            plt.grid(True)
            plt.xticks(rotation=45)
            st.pyplot(fig)

            # Matriz de correla√ß√£o
            if recent_readiness and recent_training and recent_psych:
                st.subheader("Correla√ß√µes entre M√©tricas")

                data = pd.DataFrame({
                    'prontidao': [entry['score'] for entry in recent_readiness],
                    'carga': [session['load'] for session in recent_training],
                    'estresse': [assessment['stress_score'] for assessment in recent_psych]
                })

                corr_matrix = data.corr()

                fig, ax = plt.subplots(figsize=(8, 6))
                sns.heatmap(corr_matrix, 
                           annot=True, 
                           cmap='RdYlBu_r',
                           vmin=-1,
                           vmax=1,
                           center=0)
                plt.title("Correla√ß√µes entre M√©tricas")
                st.pyplot(fig)

    # Atualizar fun√ß√µes de banco de dados para incluir novos campos
    def save_psychological_assessment(user_id, anxiety_score, stress_score, lifestyle_score, 
                                   anxiety_responses, stress_responses, lifestyle_responses):
        try:
            supabase = init_supabase()
            if not supabase:
                return None

            assessment_data = {
                'user_id': user_id,
                'anxiety_score': anxiety_score,
                'stress_score': stress_score,
                'lifestyle_score': lifestyle_score,
                'anxiety_responses': anxiety_responses,
                'stress_responses': stress_responses,
                'lifestyle_responses': lifestyle_responses
            }

            response = supabase.table('psychological_assessments').insert(assessment_data).execute()
            return response.data[0]['id']
        except Exception as e:
            return None

    def save_training_assessment(user_id, duration, rpe, heart_rate, trimp, training_load, 
                               fatigue_score, notes):
        try:
            supabase = init_supabase()
            if not supabase:
                return None

            assessment_data = {
                'user_id': user_id,
                'duration': duration,
                'rpe': rpe,
                'heart_rate': heart_rate,
                'trimp': trimp,
                'training_load': training_load,
                'fatigue_score': fatigue_score,
                'notes': notes
            }

            response = supabase.table('training_assessments').insert(assessment_data).execute()
            return response.data[0]['id']
        except Exception as e:
            return None
    