"""
M√≥dulo de Prontid√£o para o Sistema de Monitoramento do Atleta
------------------------------------------------------------
Este m√≥dulo permite ao atleta registrar e analisar sua prontid√£o di√°ria.
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
import sys
import os

# Adiciona os diret√≥rios ao path para importa√ß√£o dos m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Importa os m√≥dulos de utilidades
from utils.auth import check_authentication
from utils.database import get_readiness_data, save_readiness_assessment
from utils.helpers import format_date, calculate_readiness_score, get_date_range, get_date_labels

# Importa os componentes reutiliz√°veis
from components.cards import metric_card, recommendation_card, info_card
from components.charts import create_trend_chart, create_radar_chart, create_bar_chart
from components.navigation import create_sidebar, create_tabs, create_breadcrumbs, create_section_header

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Prontid√£o - Sistema de Monitoramento do Atleta",
    page_icon="üîã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Verifica autentica√ß√£o
if not check_authentication():
    st.switch_page("app.py")

# Cria a barra lateral
create_sidebar()

# T√≠tulo da p√°gina
st.title("üîã Prontid√£o")
create_breadcrumbs(["Dashboard", "Prontid√£o"])

# Fun√ß√£o para obter descri√ß√£o qualitativa para cada valor da escala
def get_scale_description(value, scale_type):
    """
    Retorna uma descri√ß√£o qualitativa para um valor em uma escala espec√≠fica.
    
    Args:
        value: Valor num√©rico na escala
        scale_type: Tipo de escala (sleep_quality, stress_level, etc.)
    
    Returns:
        str: Descri√ß√£o qualitativa
    """
    descriptions = {
        "sleep_quality": {
            1: "Muito ruim - Sono extremamente fragmentado, ins√¥nia severa",
            2: "Ruim - Dificuldade para dormir, despertares frequentes",
            3: "Regular - Sono razo√°vel com alguns despertares",
            4: "Bom - Sono cont√≠nuo com poucos despertares",
            5: "Excelente - Sono profundo e reparador"
        },
        "stress_level": {
            1: "Muito estressado - Sensa√ß√£o de sobrecarga, ansiedade intensa",
            2: "Estressado - Tens√£o constante, dificuldade para relaxar",
            3: "Moderado - Alguma tens√£o, mas gerenci√°vel",
            4: "Relaxado - Sensa√ß√£o de calma na maior parte do tempo",
            5: "Muito relaxado - Completamente tranquilo e em paz"
        },
        "muscle_soreness": {
            1: "Dor severa - Dor limitante, afeta movimentos b√°sicos",
            2: "Dor moderada - Desconforto constante, afeta alguns movimentos",
            3: "Dor leve - Sensa√ß√£o de desconforto ocasional",
            4: "M√≠nima dor - Leve sensibilidade em alguns m√∫sculos",
            5: "Sem dor - Nenhuma sensa√ß√£o de dor ou desconforto"
        },
        "energy_level": {
            1: "Exausto - Sem energia para atividades b√°sicas",
            2: "Cansado - Energia limitada, necessidade de esfor√ßo extra",
            3: "Moderado - Energia suficiente para o dia",
            4: "Energizado - Boa disposi√ß√£o para atividades",
            5: "Muito energizado - Energia abundante, vitalidade m√°xima"
        },
        "motivation": {
            1: "Desmotivado - Sem vontade de treinar ou se exercitar",
            2: "Pouco motivado - Precisa de esfor√ßo para iniciar atividades",
            3: "Motiva√ß√£o moderada - Disposi√ß√£o razo√°vel para treinar",
            4: "Motivado - Boa vontade e entusiasmo para treinar",
            5: "Muito motivado - Extremamente entusiasmado e ansioso para treinar"
        },
        "nutrition_quality": {
            1: "Muito ruim - Alimenta√ß√£o inadequada, processados, fast food",
            2: "Ruim - Poucas refei√ß√µes balanceadas, excesso de processados",
            3: "Regular - Algumas refei√ß√µes balanceadas, algumas escolhas ruins",
            4: "Boa - Maioria das refei√ß√µes balanceadas e nutritivas",
            5: "Excelente - Alimenta√ß√£o ideal, balanceada e nutritiva"
        },
        "hydration": {
            1: "Desidratado - Sede constante, urina escura, boca seca",
            2: "Pouco hidratado - Alguma sede, hidrata√ß√£o insuficiente",
            3: "Moderadamente hidratado - Hidrata√ß√£o razo√°vel",
            4: "Bem hidratado - Boa ingest√£o de l√≠quidos durante o dia",
            5: "Perfeitamente hidratado - Ingest√£o ideal de √°gua e l√≠quidos"
        },
        "sleep_duration": {
            # Para dura√ß√£o do sono, usamos faixas
            0: "Cr√≠tico - Menos de 4 horas",
            1: "Cr√≠tico - Menos de 4 horas",
            2: "Cr√≠tico - Menos de 4 horas",
            3: "Cr√≠tico - Menos de 4 horas",
            4: "Muito pouco - 4 horas",
            5: "Insuficiente - 5 horas",
            6: "Abaixo do ideal - 6 horas",
            7: "Adequado - 7 horas",
            8: "Ideal - 8 horas",
            9: "Excelente - 9 horas",
            10: "Abundante - 10 horas",
            11: "Abundante - 11 horas",
            12: "Abundante - 12 horas"
        }
    }
    
    # Para valores decimais na dura√ß√£o do sono
    if scale_type == "sleep_duration" and isinstance(value, float):
        # Arredonda para o inteiro mais pr√≥ximo para buscar a descri√ß√£o
        return descriptions[scale_type].get(round(value), "")
    
    return descriptions.get(scale_type, {}).get(value, "")

# Fun√ß√£o para exibir o formul√°rio de nova avalia√ß√£o
def show_new_assessment():
    """Exibe o formul√°rio para registro de nova avalia√ß√£o de prontid√£o."""
    create_section_header(
        "Nova Avalia√ß√£o de Prontid√£o", 
        "Registre como voc√™ est√° se sentindo hoje para calcular seu n√≠vel de prontid√£o para treinar.",
        "üìù"
    )
    
    # Cria o formul√°rio
    with st.form("readiness_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            sleep_quality = st.slider(
                "Qualidade do Sono", 
                1, 5, 3, 
                help="1 = Muito ruim, 5 = Excelente",
                format="%d"
            )
            st.caption(get_scale_description(sleep_quality, "sleep_quality"))
            
            sleep_duration = st.number_input(
                "Dura√ß√£o do Sono (horas)", 
                min_value=0.0, max_value=12.0, value=7.0, step=0.5,
                help="Quantidade de horas dormidas"
            )
            st.caption(get_scale_description(round(sleep_duration), "sleep_duration"))
            
            stress_level = st.slider(
                "N√≠vel de Estresse", 
                1, 5, 3, 
                help="1 = Muito estressado, 5 = Muito relaxado",
                format="%d"
            )
            st.caption(get_scale_description(stress_level, "stress_level"))
            
            muscle_soreness = st.slider(
                "Dor Muscular", 
                1, 5, 3, 
                help="1 = Muita dor, 5 = Sem dor",
                format="%d"
            )
            st.caption(get_scale_description(muscle_soreness, "muscle_soreness"))
        
        with col2:
            energy_level = st.slider(
                "N√≠vel de Energia", 
                1, 5, 3, 
                help="1 = Sem energia, 5 = Muito energizado",
                format="%d"
            )
            st.caption(get_scale_description(energy_level, "energy_level"))
            
            motivation = st.slider(
                "Motiva√ß√£o", 
                1, 5, 3, 
                help="1 = Desmotivado, 5 = Muito motivado",
                format="%d"
            )
            st.caption(get_scale_description(motivation, "motivation"))
            
            nutrition_quality = st.slider(
                "Qualidade da Nutri√ß√£o", 
                1, 5, 3, 
                help="1 = Muito ruim, 5 = Excelente",
                format="%d"
            )
            st.caption(get_scale_description(nutrition_quality, "nutrition_quality"))
            
            hydration = st.slider(
                "Hidrata√ß√£o", 
                1, 5, 3, 
                help="1 = Desidratado, 5 = Bem hidratado",
                format="%d"
            )
            st.caption(get_scale_description(hydration, "hydration"))
        
        notes = st.text_area("Notas Adicionais", 
                           placeholder="Observa√ß√µes sobre como voc√™ est√° se sentindo hoje...")
        
        submit = st.form_submit_button("Calcular Prontid√£o", use_container_width=True)
        
        if submit:
            # Coleta os dados do formul√°rio
            assessment_data = {
                'date': datetime.now().isoformat(),
                'sleep_quality': sleep_quality,
                'sleep_duration': sleep_duration,
                'stress_level': stress_level,
                'muscle_soreness': muscle_soreness,
                'energy_level': energy_level,
                'motivation': motivation,
                'nutrition_quality': nutrition_quality,
                'hydration': hydration,
                'notes': notes
            }
            
            # Calcula o score de prontid√£o
            score = calculate_readiness_score(assessment_data)
            assessment_data['score'] = score
            
            # Salva no banco de dados
            if save_readiness_assessment(st.session_state.user_id, assessment_data):
                st.success("Avalia√ß√£o de prontid√£o registrada com sucesso!")
                
                # Exibe o resultado
                show_assessment_result(score, assessment_data)
            else:
                st.error("Erro ao salvar a avalia√ß√£o. Tente novamente.")

# Fun√ß√£o para exibir o resultado da avalia√ß√£o
def show_assessment_result(score, assessment_data):
    """
    Exibe o resultado da avalia√ß√£o de prontid√£o com interpreta√ß√£o e recomenda√ß√µes.
    
    Args:
        score (int): Score de prontid√£o (0-100)
        assessment_data (dict): Dados da avalia√ß√£o
    """
    st.markdown("---")
    create_section_header("Resultado da Avalia√ß√£o", "Seu n√≠vel de prontid√£o para hoje", "üìä")
    
    # Exibe o score em um card grande
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        # Determina a cor e mensagem com base no score
        if score >= 80:
            color = "#4CAF50"  # Verde
            status = "Excelente"
            message = "Voc√™ est√° em √≥tima forma para treinar hoje!"
        elif score >= 60:
            color = "#8BC34A"  # Verde claro
            status = "Bom"
            message = "Voc√™ est√° bem para treinar hoje."
        elif score >= 40:
            color = "#FFC107"  # Amarelo
            status = "Moderado"
            message = "Voc√™ pode treinar, mas considere reduzir a intensidade."
        elif score >= 20:
            color = "#FF9800"  # Laranja
            status = "Baixo"
            message = "Considere um treino leve ou recupera√ß√£o ativa hoje."
        else:
            color = "#F44336"  # Vermelho
            status = "Muito Baixo"
            message = "Recomendamos descanso ou recupera√ß√£o passiva hoje."
        
        # Estilo CSS para o card de resultado
        st.markdown(f"""
        <style>
        .result-card {{
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }}
        .result-score {{
            font-size: 72px;
            font-weight: 700;
            color: {color};
            margin: 10px 0;
        }}
        .result-status {{
            font-size: 24px;
            font-weight: 600;
            color: {color};
            margin-bottom: 15px;
        }}
        .result-message {{
            font-size: 18px;
            color: #424242;
            margin-bottom: 10px;
        }}
        </style>
        
        <div class="result-card">
            <div class="result-score">{score}</div>
            <div class="result-status">{status}</div>
            <div class="result-message">{message}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Exibe recomenda√ß√µes baseadas nos componentes mais fracos
    st.subheader("Recomenda√ß√µes")
    
    # Identifica os componentes mais fracos
    components = {
        'sleep_quality': ('Qualidade do Sono', assessment_data['sleep_quality']),
        'sleep_duration': ('Dura√ß√£o do Sono', assessment_data['sleep_duration'] / 2.4),  # Normaliza para escala 1-5
        'stress_level': ('N√≠vel de Estresse', assessment_data['stress_level']),
        'muscle_soreness': ('Dor Muscular', assessment_data['muscle_soreness']),
        'energy_level': ('N√≠vel de Energia', assessment_data['energy_level']),
        'motivation': ('Motiva√ß√£o', assessment_data['motivation']),
        'nutrition_quality': ('Qualidade da Nutri√ß√£o', assessment_data['nutrition_quality']),
        'hydration': ('Hidrata√ß√£o', assessment_data['hydration'])
    }
    
    # Ordena os componentes por valor (do menor para o maior)
    sorted_components = sorted(components.items(), key=lambda x: x[1][1])
    
    # Gera recomenda√ß√µes para os 3 componentes mais fracos
    recommendations = []
    
    for component, (name, value) in sorted_components[:3]:
        if component == 'sleep_quality' or component == 'sleep_duration':
            recommendations.append(f"Melhore seu sono: tente dormir mais cedo, evite telas antes de dormir e mantenha um ambiente calmo.")
        elif component == 'stress_level':
            recommendations.append(f"Reduza o estresse: pratique t√©cnicas de respira√ß√£o, medita√ß√£o ou atividades relaxantes.")
        elif component == 'muscle_soreness':
            recommendations.append(f"Cuide da recupera√ß√£o muscular: considere massagem, alongamento, banho de contraste ou crioterapia.")
        elif component == 'energy_level':
            recommendations.append(f"Aumente seu n√≠vel de energia: verifique sua alimenta√ß√£o, hidrata√ß√£o e considere uma pequena caminhada ao ar livre.")
        elif component == 'motivation':
            recommendations.append(f"Trabalhe sua motiva√ß√£o: defina metas claras, varie seus treinos ou treine com um parceiro.")
        elif component == 'nutrition_quality':
            recommendations.append(f"Melhore sua nutri√ß√£o: aumente o consumo de alimentos integrais, frutas, vegetais e prote√≠nas magras.")
        elif component == 'hydration':
            recommendations.append(f"Melhore sua hidrata√ß√£o: beba √°gua regularmente ao longo do dia, n√£o apenas durante os treinos.")
    
    # Adiciona recomenda√ß√£o baseada no score geral
    if score < 40:
        recommendations.append(f"Considere um dia de descanso ou recupera√ß√£o ativa com atividades de baixa intensidade.")
    elif score < 60:
        recommendations.append(f"Reduza a intensidade do treino hoje e foque em t√©cnica ou treino de baixo impacto.")
    
    # Calcula a recomenda√ß√£o de redu√ß√£o de volume com base no score
    volume_reduction = max(0, int((100 - score) * 0.8))  # 0% de redu√ß√£o para score 100, at√© 80% para score 0
    if volume_reduction > 0:
        recommendations.append(f"Recomenda√ß√£o de volume: reduza o volume do seu treino em aproximadamente {volume_reduction}% hoje.")
    
    # Exibe as recomenda√ß√µes em um card
    recommendation_card("Recomenda√ß√µes Personalizadas", recommendations)

# Fun√ß√£o para exibir o hist√≥rico de prontid√£o
def show_history():
    """Exibe o hist√≥rico de avalia√ß√µes de prontid√£o com gr√°ficos e an√°lises."""
    create_section_header(
        "Hist√≥rico de Prontid√£o", 
        "Acompanhe a evolu√ß√£o do seu n√≠vel de prontid√£o ao longo do tempo.",
        "üìà"
    )
    
    # Op√ß√µes de per√≠odo
    period_options = {
        "7 dias": 7,
        "15 dias": 15,
        "30 dias": 30,
        "90 dias": 90,
        "6 meses": 180
    }
    
    selected_period = st.selectbox("Selecione o per√≠odo", list(period_options.keys()))
    days = period_options[selected_period]
    
    # Obt√©m os dados de prontid√£o
    readiness_data = get_readiness_data(st.session_state.user_id, days)
    
    if not readiness_data:
        info_card(
            "Sem dados",
            "Voc√™ ainda n√£o possui avalia√ß√µes de prontid√£o registradas neste per√≠odo.",
            "‚ÑπÔ∏è"
        )
        return
    
    # Converte para DataFrame para facilitar a manipula√ß√£o
    df = pd.DataFrame(readiness_data)
    
    # Formata as datas
    df['date_formatted'] = df['date'].apply(lambda x: format_date(x, "%d/%m"))
    
    # Gr√°fico de linha para score ao longo do tempo
    st.subheader("Evolu√ß√£o do Score de Prontid√£o")
    
    fig = px.line(
        df, 
        x='date_formatted', 
        y='score',
        markers=True,
        line_shape='spline',
        color_discrete_sequence=["#1E88E5"]
    )
    
    fig.update_layout(
        xaxis_title="Data",
        yaxis_title="Score de Prontid√£o",
        yaxis=dict(range=[0, 100]),
        height=400,
        margin=dict(l=20, r=20, t=20, b=20)
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Gr√°fico de barras para componentes m√©dios
    st.subheader("Componentes M√©dios")
    
    # Calcula m√©dias dos componentes
    component_means = {
        'Qualidade do Sono': df['sleep_quality'].mean(),
        'Dura√ß√£o do Sono': df['sleep_duration'].mean() / 2.4,  # Normaliza para escala 1-5
        'N√≠vel de Estresse': df['stress_level'].mean(),
        'Dor Muscular': df['muscle_soreness'].mean(),
        'N√≠vel de Energia': df['energy_level'].mean(),
        'Motiva√ß√£o': df['motivation'].mean(),
        'Nutri√ß√£o': df['nutrition_quality'].mean(),
        'Hidrata√ß√£o': df['hydration'].mean()
    }
    
    # Cria o gr√°fico de barras
    components_fig = create_bar_chart(
        categories=list(component_means.keys()),
        values=list(component_means.values()),
        color='#8BC34A',
        y_title="M√©dia (1-5)"
    )
    
    components_fig.update_layout(height=400)
    st.plotly_chart(components_fig, use_container_width=True)
    
    # Radar chart para √∫ltima avalia√ß√£o vs m√©dia
    st.subheader("√öltima Avalia√ß√£o vs. M√©dia")
    
    # Obt√©m a √∫ltima avalia√ß√£o
    last_assessment = df.iloc[-1]
    
    # Prepara os dados para o radar chart
    categories = [
        'Qualidade do Sono', 'Dura√ß√£o do Sono', 'N√≠vel de Estresse', 
        'Dor Muscular', 'N√≠vel de Energia', 'Motiva√ß√£o', 
        'Nutri√ß√£o', 'Hidrata√ß√£o'
    ]
    
    last_values = [
        last_assessment['sleep_quality'],
        last_assessment['sleep_duration'] / 2.4,  # Normaliza para escala 1-5
        last_assessment['stress_level'],
        last_assessment['muscle_soreness'],
        last_assessment['energy_level'],
        last_assessment['motivation'],
        last_assessment['nutrition_quality'],
        last_assessment['hydration']
    ]
    
    mean_values = list(component_means.values())
    
    # Cria o radar chart
    radar_fig = create_radar_chart(
        categories=categories,
        values=last_values,
        reference_values=mean_values,
        title="Compara√ß√£o de Componentes"
    )
    
    st.plotly_chart(radar_fig, use_container_width=True)
    
    # Estat√≠sticas do per√≠odo
    st.subheader("Estat√≠sticas do Per√≠odo")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        metric_card(
            title="Score M√©dio",
            value=f"{df['score'].mean():.1f}",
            description=f"M√©dia de {len(df)} avalia√ß√µes"
        )
    
    with col2:
        metric_card(
            title="Score M√°ximo",
            value=f"{df['score'].max()}",
            description=f"Melhor dia: {format_date(df.loc[df['score'].idxmax()]['date'])}"
        )
    
    with col3:
        metric_card(
            title="Score M√≠nimo",
            value=f"{df['score'].min()}",
            description=f"Pior dia: {format_date(df.loc[df['score'].idxmin()]['date'])}"
        )

# Fun√ß√£o para exibir an√°lises de prontid√£o
def show_analysis():
    """Exibe an√°lises avan√ßadas dos dados de prontid√£o."""
    create_section_header(
        "An√°lise de Prontid√£o", 
        "Insights e correla√ß√µes para entender melhor seus padr√µes.",
        "üîç"
    )
    
    # Obt√©m os dados de prontid√£o (√∫ltimos 90 dias)
    readiness_data = get_readiness_data(st.session_state.user_id, 90)
    
    if not readiness_data or len(readiness_data) < 7:
        info_card(
            "Dados insuficientes",
            "S√£o necess√°rias pelo menos 7 avalia√ß√µes para gerar an√°lises. Continue registrando sua prontid√£o diariamente.",
            "‚ÑπÔ∏è"
        )
        return
    
    # Converte para DataFrame
    df = pd.DataFrame(readiness_data)
    
    # Adiciona dia da semana
    df['date_obj'] = pd.to_datetime(df['date'])
    df['weekday'] = df['date_obj'].dt.day_name()
    
    # Ordem dos dias da semana
    weekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    weekday_pt = {
        'Monday': 'Segunda',
        'Tuesday': 'Ter√ßa',
        'Wednesday': 'Quarta',
        'Thursday': 'Quinta',
        'Friday': 'Sexta',
        'Saturday': 'S√°bado',
        'Sunday': 'Domingo'
    }
    
    df['weekday_pt'] = df['weekday'].map(weekday_pt)
    
    # An√°lise por dia da semana
    st.subheader("Score de Prontid√£o por Dia da Semana")
    
    # Calcula m√©dia por dia da semana
    weekday_avg = df.groupby('weekday')['score'].mean().reindex(weekday_order).reset_index()
    weekday_avg['weekday_pt'] = weekday_avg['weekday'].map(weekday_pt)
    
    # Cria o gr√°fico
    fig = px.bar(
        weekday_avg,
        x='weekday_pt',
        y='score',
        color='score',
        color_continuous_scale='Viridis',
        labels={'score': 'Score M√©dio', 'weekday_pt': 'Dia da Semana'}
    )
    
    fig.update_layout(
        yaxis=dict(range=[0, 100]),
        height=400,
        margin=dict(l=20, r=20, t=20, b=20)
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Identifica os melhores e piores dias
    best_day = weekday_avg.loc[weekday_avg['score'].idxmax()]
    worst_day = weekday_avg.loc[weekday_avg['score'].idxmin()]
    
    col1, col2 = st.columns(2)
    
    with col1:
        metric_card(
            title="Melhor Dia da Semana",
            value=best_day['weekday_pt'],
            description=f"Score m√©dio: {best_day['score']:.1f}"
        )
    
    with col2:
        metric_card(
            title="Pior Dia da Semana",
            value=worst_day['weekday_pt'],
            description=f"Score m√©dio: {worst_day['score']:.1f}"
        )
    
    # Correla√ß√µes entre vari√°veis
    st.subheader("Correla√ß√µes entre Componentes")
    
    # Seleciona apenas as colunas num√©ricas relevantes
    numeric_cols = [
        'sleep_quality', 'sleep_duration', 'stress_level', 'muscle_soreness',
        'energy_level', 'motivation', 'nutrition_quality', 'hydration', 'score'
    ]
    
    # Calcula a matriz de correla√ß√£o
    corr_matrix = df[numeric_cols].corr()
    
    # Nomes mais amig√°veis para os componentes
    component_names = {
        'sleep_quality': 'Qualidade do Sono',
        'sleep_duration': 'Dura√ß√£o do Sono',
        'stress_level': 'N√≠vel de Estresse',
        'muscle_soreness': 'Dor Muscular',
        'energy_level': 'N√≠vel de Energia',
        'motivation': 'Motiva√ß√£o',
        'nutrition_quality': 'Nutri√ß√£o',
        'hydration': 'Hidrata√ß√£o',
        'score': 'Score Final'
    }
    
    # Renomeia os √≠ndices e colunas
    corr_matrix.index = [component_names[col] for col in corr_matrix.index]
    corr_matrix.columns = [component_names[col] for col in corr_matrix.columns]
    
    # Cria o heatmap
    fig = px.imshow(
        corr_matrix,
        text_auto='.2f',
        color_continuous_scale='RdBu_r',
        zmin=-1,
        zmax=1,
        aspect="auto"
    )
    
    fig.update_layout(
        height=500,
        margin=dict(l=20, r=20, t=20, b=20)
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Insights autom√°ticos
    st.subheader("Insights Autom√°ticos")
    
    # Encontra os componentes mais correlacionados com o score
    score_corr = corr_matrix['Score Final'].drop('Score Final').sort_values(ascending=False)
    top_components = score_corr.head(3)
    
    insights = [
        f"Os componentes que mais impactam seu score de prontid√£o s√£o: {', '.join(top_components.index)}.",
        f"Seu n√≠vel de prontid√£o tende a ser melhor √†s {best_day['weekday_pt']}s e pior √†s {worst_day['weekday_pt']}s.",
    ]
    
    # Adiciona insights sobre tend√™ncias
    if len(df) >= 14:
        recent_trend = df['score'].tail(7).mean() - df['score'].tail(14).head(7).mean()
        if abs(recent_trend) > 5:
            trend_direction = "melhorando" if recent_trend > 0 else "piorando"
            insights.append(f"Sua prontid√£o est√° {trend_direction} nas √∫ltimas semanas (varia√ß√£o de {abs(recent_trend):.1f} pontos).")
    
    # Exibe os insights
    for insight in insights:
        info_card("Insight", insight, "üí°")

# Fun√ß√£o principal
def main():
    """Fun√ß√£o principal que controla o fluxo da p√°gina."""
    # Cria as abas
    tabs = create_tabs(["Nova Avalia√ß√£o", "Hist√≥rico", "An√°lise"])
    
    # Aba de Nova Avalia√ß√£o
    with tabs[0]:
        show_new_assessment()
    
    # Aba de Hist√≥rico
    with tabs[1]:
        show_history()
    
    # Aba de An√°lise
    with tabs[2]:
        show_analysis()

# Executa a fun√ß√£o principal
if __name__ == "__main__":
    main()
