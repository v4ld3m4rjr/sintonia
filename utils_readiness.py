import pandas as pd
import numpy as np

def calculate_readiness_score(data):
    """
    Calcula o score de prontid√£o baseado nos dados fornecidos
    Pesos definidos com base em literatura cient√≠fica
    """
    weights = {
        'sleep_quality': 0.25,      # 25% - Qualidade do sono
        'sleep_duration': 0.15,     # 15% - Dura√ß√£o do sono
        'stress_level': 0.20,       # 20% - N√≠vel de estresse
        'muscle_soreness': 0.15,    # 15% - Dor muscular
        'energy_level': 0.15,       # 15% - N√≠vel de energia
        'motivation': 0.05,         # 5% - Motiva√ß√£o
        'nutrition_quality': 0.03,  # 3% - Qualidade nutricional
        'hydration': 0.02          # 2% - Hidrata√ß√£o
    }
    
    # Normalizar vari√°veis invertidas (quanto menor, melhor)
    normalized_stress = 6 - data['stress_level']
    normalized_soreness = 6 - data['muscle_soreness']
    
    # Normalizar dura√ß√£o do sono (ideal = 8 horas, m√°ximo = 5 pontos)
    sleep_duration_normalized = min(data['sleep_duration'] / 8 * 5, 5)
    
    # Calcular score ponderado
    score = (
        weights['sleep_quality'] * data['sleep_quality'] +
        weights['sleep_duration'] * sleep_duration_normalized +
        weights['stress_level'] * normalized_stress +
        weights['muscle_soreness'] * normalized_soreness +
        weights['energy_level'] * data['energy_level'] +
        weights['motivation'] * data['motivation'] +
        weights['nutrition_quality'] * data['nutrition_quality'] +
        weights['hydration'] * data['hydration']
    )
    
    # Converter para escala 0-100
    return round(score * 20, 1)

def get_readiness_interpretation(score):
    """
    Retorna interpreta√ß√£o do score de prontid√£o
    """
    if score >= 85:
        return {
            "level": "Excelente",
            "color": "#2E7D32",  # Verde escuro
            "emoji": "üü¢",
            "description": "Prontid√£o excelente! Ideal para treinos de alta intensidade ou competi√ß√µes.",
            "recommendations": [
                "Aproveite para treinos de alta intensidade",
                "Momento ideal para competi√ß√µes",
                "Mantenha a consist√™ncia na rotina"
            ]
        }
    elif score >= 70:
        return {
            "level": "Boa",
            "color": "#388E3C",  # Verde
            "emoji": "üîµ",
            "description": "Boa prontid√£o. Adequado para treinos regulares com intensidade moderada a alta.",
            "recommendations": [
                "Treinos de intensidade moderada a alta s√£o apropriados",
                "Continue monitorando os indicadores",
                "Foque na manuten√ß√£o da qualidade do sono"
            ]
        }
    elif score >= 55:
        return {
            "level": "Moderada",
            "color": "#FBC02D",  # Amarelo
            "emoji": "üü°",
            "description": "Prontid√£o moderada. Considere treinos de intensidade m√©dia.",
            "recommendations": [
                "Treinos de intensidade baixa a moderada",
                "Evite esfor√ßos m√°ximos",
                "Revise fatores de recupera√ß√£o"
            ]
        }
    elif score >= 40:
        return {
            "level": "Baixa",
            "color": "#FF8F00",  # Laranja
            "emoji": "üü†",
            "description": "Prontid√£o baixa. Recomenda-se treinos leves ou descanso ativo.",
            "recommendations": [
                "Apenas treinos leves ou descanso ativo",
                "Priorize recupera√ß√£o",
                "Analise fatores que impactam o sono e estresse"
            ]
        }
    else:
        return {
            "level": "Muito Baixa",
            "color": "#D32F2F",  # Vermelho
            "emoji": "üî¥",
            "description": "Prontid√£o muito baixa. Priorize recupera√ß√£o e descanso.",
            "recommendations": [
                "Descanso completo ou atividade muito leve",
                "Foque totalmente na recupera√ß√£o",
                "Considere consultar profissional de sa√∫de"
            ]
        }

def analyze_readiness_trend(data):
    """
    Analisa tend√™ncia dos scores de prontid√£o
    """
    if len(data) < 3:
        return {
            "trend": "Dados insuficientes",
            "description": "Precisamos de mais dados para an√°lise de tend√™ncia",
            "color": "#757575"
        }
    
    scores = data['readiness_score'].tolist()
    
    # Calcular tend√™ncia usando regress√£o linear simples
    x = np.arange(len(scores))
    slope = np.polyfit(x, scores, 1)[0]
    
    if slope > 2:
        return {
            "trend": "Melhorando significativamente",
            "description": f"Tend√™ncia positiva (+{slope:.1f} pontos por avalia√ß√£o)",
            "color": "#2E7D32",
            "emoji": "üìà"
        }
    elif slope > 0.5:
        return {
            "trend": "Melhorando",
            "description": f"Leve melhora (+{slope:.1f} pontos por avalia√ß√£o)",
            "color": "#388E3C",
            "emoji": "üìà"
        }
    elif slope < -2:
        return {
            "trend": "Piorando significativamente",
            "description": f"Tend√™ncia negativa ({slope:.1f} pontos por avalia√ß√£o)",
            "color": "#D32F2F",
            "emoji": "üìâ"
        }
    elif slope < -0.5:
        return {
            "trend": "Piorando",
            "description": f"Leve decl√≠nio ({slope:.1f} pontos por avalia√ß√£o)",
            "color": "#FF8F00",
            "emoji": "üìâ"
        }
    else:
        return {
            "trend": "Est√°vel",
            "description": "Prontid√£o mantendo-se est√°vel",
            "color": "#1565C0",
            "emoji": "‚û°Ô∏è"
        }

def get_component_analysis(data):
    """
    Analisa componentes individuais da prontid√£o
    """
    if data.empty:
        return {}
    
    latest = data.iloc[0]  # Mais recente
    avg_30d = data.head(30).mean() if len(data) >= 30 else data.mean()
    
    components = {
        'sleep_quality': {
            'name': 'Qualidade do Sono',
            'current': latest['sleep_quality'],
            'average': avg_30d['sleep_quality'],
            'weight': 25,
            'optimal_range': (4, 5)
        },
        'sleep_duration': {
            'name': 'Dura√ß√£o do Sono',
            'current': latest['sleep_duration'],
            'average': avg_30d['sleep_duration'],
            'weight': 15,
            'optimal_range': (7, 9),
            'unit': 'horas'
        },
        'stress_level': {
            'name': 'N√≠vel de Estresse',
            'current': latest['stress_level'],
            'average': avg_30d['stress_level'],
            'weight': 20,
            'optimal_range': (1, 2),
            'inverted': True
        },
        'muscle_soreness': {
            'name': 'Dor Muscular',
            'current': latest['muscle_soreness'],
            'average': avg_30d['muscle_soreness'],
            'weight': 15,
            'optimal_range': (1, 2),
            'inverted': True
        },
        'energy_level': {
            'name': 'N√≠vel de Energia',
            'current': latest['energy_level'],
            'average': avg_30d['energy_level'],
            'weight': 15,
            'optimal_range': (4, 5)
        },
        'motivation': {
            'name': 'Motiva√ß√£o',
            'current': latest['motivation'],
            'average': avg_30d['motivation'],
            'weight': 5,
            'optimal_range': (4, 5)
        },
        'nutrition_quality': {
            'name': 'Qualidade Nutricional',
            'current': latest['nutrition_quality'],
            'average': avg_30d['nutrition_quality'],
            'weight': 3,
            'optimal_range': (4, 5)
        },
        'hydration': {
            'name': 'Hidrata√ß√£o',
            'current': latest['hydration'],
            'average': avg_30d['hydration'],
            'weight': 2,
            'optimal_range': (4, 5)
        }
    }
    
    return components

def get_weekly_pattern_analysis(data):
    """
    Analisa padr√µes semanais de prontid√£o
    """
    if data.empty:
        return {}
    
    # Adicionar dia da semana
    data_copy = data.copy()
    data_copy['weekday'] = pd.to_datetime(data_copy['date']).dt.day_name()
    data_copy['weekday_pt'] = data_copy['weekday'].map({
        'Monday': 'Segunda',
        'Tuesday': 'Ter√ßa',
        'Wednesday': 'Quarta',
        'Thursday': 'Quinta',
        'Friday': 'Sexta',
        'Saturday': 'S√°bado',
        'Sunday': 'Domingo'
    })
    
    # Calcular m√©dias por dia da semana
    weekly_avg = data_copy.groupby('weekday_pt')['readiness_score'].agg(['mean', 'count']).round(1)
    
    # Ordenar dias da semana
    day_order = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo']
    weekly_avg = weekly_avg.reindex([day for day in day_order if day in weekly_avg.index])
    
    # Identificar melhor e pior dia
    best_day = weekly_avg['mean'].idxmax() if not weekly_avg.empty else None
    worst_day = weekly_avg['mean'].idxmin() if not weekly_avg.empty else None
    
    return {
        'weekly_averages': weekly_avg.to_dict('index'),
        'best_day': {
            'day': best_day,
            'score': weekly_avg.loc[best_day, 'mean'] if best_day else 0
        },
        'worst_day': {
            'day': worst_day,
            'score': weekly_avg.loc[worst_day, 'mean'] if worst_day else 0
        }
    }

def get_personalized_recommendations(latest_assessment, historical_data):
    """
    Gera recomenda√ß√µes personalizadas baseadas nos dados
    """
    recommendations = []
    
    if not latest_assessment:
        return recommendations
    
    # An√°lise do sono
    if latest_assessment['sleep_quality'] < 3:
        recommendations.append({
            'category': 'Sono',
            'priority': 'Alta',
            'title': 'Melhorar Qualidade do Sono',
            'description': 'Sua qualidade de sono est√° baixa',
            'actions': [
                'Criar rotina relaxante antes de dormir',
                'Evitar telas 1 hora antes de dormir',
                'Manter ambiente escuro e fresco',
                'Considerar t√©cnicas de relaxamento'
            ]
        })
    
    if latest_assessment['sleep_duration'] < 7:
        recommendations.append({
            'category': 'Sono',
            'priority': 'Alta',
            'title': 'Aumentar Dura√ß√£o do Sono',
            'description': f'Voc√™ dormiu {latest_assessment["sleep_duration"]:.1f}h, menos que o recomendado',
            'actions': [
                'Deitar mais cedo (ideal: 7-9 horas de sono)',
                'Reduzir cafe√≠na ap√≥s 15h',
                'Criar hor√°rio consistente para dormir'
            ]
        })
    
    # An√°lise do estresse
    if latest_assessment['stress_level'] > 3:
        recommendations.append({
            'category': 'Estresse',
            'priority': 'Alta',
            'title': 'Gerenciar Estresse',
            'description': 'Seus n√≠veis de estresse est√£o elevados',
            'actions': [
                'Praticar medita√ß√£o ou mindfulness',
                'Fazer exerc√≠cios respirat√≥rios',
                'Identificar e gerenciar fontes de estresse',
                'Considerar atividades relaxantes'
            ]
        })
    
    # An√°lise da dor muscular
    if latest_assessment['muscle_soreness'] > 3:
        recommendations.append({
            'category': 'Recupera√ß√£o',
            'priority': 'M√©dia',
            'title': 'Cuidar da Recupera√ß√£o Muscular',
            'description': 'Voc√™ est√° com dor muscular significativa',
            'actions': [
                'Fazer alongamentos suaves',
                'Usar foam roller',
                'Considerar massagem ou banho quente',
                'Reduzir intensidade dos treinos temporariamente'
            ]
        })
    
    # An√°lise da energia
    if latest_assessment['energy_level'] < 3:
        recommendations.append({
            'category': 'Energia',
            'priority': 'M√©dia',
            'title': 'Aumentar N√≠veis de Energia',
            'description': 'Seus n√≠veis de energia est√£o baixos',
            'actions': [
                'Revisar alimenta√ß√£o e hidrata√ß√£o',
                'Garantir exposi√ß√£o √† luz solar',
                'Verificar qualidade do sono',
                'Considerar reduzir carga de treino'
            ]
        })
    
    # An√°lise da nutri√ß√£o
    if latest_assessment['nutrition_quality'] < 3:
        recommendations.append({
            'category': 'Nutri√ß√£o',
            'priority': 'Baixa',
            'title': 'Melhorar Alimenta√ß√£o',
            'description': 'Sua qualidade nutricional pode ser melhorada',
            'actions': [
                'Planejar refei√ß√µes com anteced√™ncia',
                'Incluir mais frutas e vegetais',
                'Garantir prote√≠na adequada',
                'Manter regularidade nas refei√ß√µes'
            ]
        })
    
    return recommendations